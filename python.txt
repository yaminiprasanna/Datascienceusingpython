Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. 
Its high-level built in data structures, combined with dynamic typing and dynamic binding, 
make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. 
Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. 
Python supports modules and packages, which encourages program modularity and code reuse.
The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.
Often, programmers fall in love with Python because of the increased productivity it provides. 
Since there is no compilation step, the edit-test-debug cycle is incredibly fast. 
Debugging Python programs is easy: a bug or bad input will never cause a segmentation fault.
Instead, when the interpreter discovers an error, it raises an exception. When the program doesn't catch the 
exception, the interpreter prints a stack trace. A source level debugger allows inspection of local and global variables, 
evaluation of arbitrary expressions, setting breakpoints, stepping through the code a line at a time, and so on.
The debugger is written in Python itself, testifying to Python's introspective power. 
On the other hand, often the quickest way to debug a program is to add a few print statements to the source:
the fast edit-test-debug cycle makes this simple approach very effective.
Python was conceived in the late 1980s,[30] and its implementation began in December 1989[31] by Guido van Rossum at
Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL)[32]
capable of exception handling and interfacing with the Amoeba operating system.[6] Van Rossum remains Python's principal 
author. His continuing central role in Python's development is reflected in the title given to him by the Python community: Benevolent Dictator For Life (BDFL).
On the origins of Python, Van Rossum wrote in 1996:[33]
“ 	...In December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around 
Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands.
I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that
would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood
(and abig fan of Monty Python's Flying Circus). 	”
Python 2.0 was released on 16 October 2000 and had many major new features, including a cycle-detecting garbage collector 
and support for Unicode. With this release, the development process became more transparent and community-backed.[34]
Python 3.0 (initially called Python 3000 or py3k) was released on 3 December 2008 after a long testing period. 
It is a major revision of the language that is not backward-compatible with previous versions.[35] However,
many of its major features have been backported to the backward-compatible Python 2.6.x[36] and 2.7.x version series.
Python 2.7's end-of-life date (a.k.a. EOL, sunset date) was initially set at 2015, then postponed to 2020 out of
concern that a large body of existing code could not easily be forward-ported to Python 3.[37][38] In January 2017, Google
announced work on a Python 2.7 to Go transcompiler. The Register speculated that this was in response to Python 2.7's 
planned end-of-life[39], but Google cited performance under concurrent workloads as their only motivation.[40]

